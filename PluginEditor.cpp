/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Musi45effectAudioProcessorEditor::Musi45effectAudioProcessorEditor (Musi45effectAudioProcessor& p)
    :   AudioProcessorEditor (&p), processor (p),
        peakFreqSlider("fs"),         // STEP 1.2 - initialize slider with UI component name
        peakGainSlider("gain"),
        qSlider("q"),
        lowFreqSlider("low frequency"),
        lowGainSlider("low volume"),
        decaySlider("decay"),
        timeSlider("time"),
        wetSlider("wet"),
        drySlider("dry"),
        peakFreqLabel("","Peak Frequency"),
        peakGainLabel("", "Peak Gain (dB)"),
        qLabel("","Q"),
        lowFreqLabel("","Cutoff Frequency"),
        lowGainLabel("", "Gain (dB)"),
        decayLabel("", "Decay"),
        timeLabel("", "Time (ms)"),
        wetLabel("", "Wet Gain (dB)"),
        dryLabel("", "Dry Gain (dB)")

{
    // Peak Frequency
    peakFreqSlider.setSliderStyle(Slider::RotaryHorizontalDrag);  // what kind of slider?
    peakFreqSlider.setRange(300, 20000, 1);               // the dB version
    addAndMakeVisible(peakFreqSlider);                      // add the slider to the GUI
    peakFreqSlider.addListener(this);                       // STEP 3.4 - add a listener for this function
    peakFreqSlider.setColour(0x1001311, Colour(255, 255, 255));
    peakFreqSlider.setColour(0x1001200, Colour(255, 255, 255));
    peakFreqSlider.setColour(0x1001300, Colour(255, 255, 255));
    peakFreqSlider.setColour(0x1001312, Colour(255, 255, 255));
    peakFreqSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    peakFreqLabel.attachToComponent (&peakFreqSlider, false);
    peakFreqLabel.setFont (Font (11.0f));
    peakFreqLabel.setColour(0x1000281, Colour(255, 255, 255));
    peakFreqLabel.setJustificationType(juce::Justification::centredBottom);
    
    //Peak Gain
    peakGainSlider.setSliderStyle (Slider::RotaryHorizontalDrag);
    peakGainSlider.setRange(-96.0, 0.0, 0.1);
    addAndMakeVisible(peakGainSlider);
    peakGainSlider.addListener(this);
    peakGainSlider.setColour(0x1001311, Colour(255, 255, 255));
    peakGainSlider.setColour(0x1001200, Colour(255, 255, 255));
    peakGainSlider.setColour(0x1001300, Colour(255, 255, 255));
    peakGainSlider.setColour(0x1001312, Colour(255, 255, 255));
    peakGainSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    peakGainLabel.attachToComponent (&peakGainSlider, false);
    peakGainLabel.setFont (Font (11.0f));
    peakGainLabel.setColour(0x1000281, Colour(255, 255, 255));
    peakGainLabel.setJustificationType(juce::Justification::centredBottom);
    
    //Peak Q
    qSlider.setSliderStyle (Slider::RotaryHorizontalDrag);
    qSlider.setRange(0.5, 20.0, 0.01);
    addAndMakeVisible(qSlider);
    qSlider.addListener(this);
    qSlider.setColour(0x1001311, Colour(255, 255, 255));
    qSlider.setColour(0x1001200, Colour(255, 255, 255));
    qSlider.setColour(0x1001300, Colour(255, 255, 255));
    qSlider.setColour(0x1001312, Colour(255, 255, 255));
    qSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    qLabel.attachToComponent (&qSlider, false);
    qLabel.setFont (Font (11.0f));
    qLabel.setColour(0x1000281, Colour(255, 255, 255));
    qLabel.setJustificationType(juce::Justification::centredBottom);
    
    // Low Frequency
    lowFreqSlider.setSliderStyle (Slider::RotaryHorizontalDrag);
    lowFreqSlider.setRange(0, 200, 1);
    addAndMakeVisible(lowFreqSlider);
    lowFreqSlider.addListener(this);
    lowFreqSlider.setColour(0x1001311, Colour(255, 255, 255));
    lowFreqSlider.setColour(0x1001200, Colour(255, 255, 255));
    lowFreqSlider.setColour(0x1001300, Colour(255, 255, 255));
    lowFreqSlider.setColour(0x1001312, Colour(255, 255, 255));
    lowFreqSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    lowFreqLabel.attachToComponent (&lowFreqSlider, false);
    lowFreqLabel.setFont (Font (11.0f));
    lowFreqLabel.setColour(0x1000281, Colour(255, 255, 255));
    lowFreqLabel.setJustificationType(juce::Justification::centredBottom);
    
    //Low Gain
    lowGainSlider.setSliderStyle (Slider::RotaryHorizontalDrag);
    lowGainSlider.setRange(-96.0, 0.0, 0.1);
    addAndMakeVisible(lowGainSlider);
    lowGainSlider.addListener(this);
    lowGainSlider.setColour(0x1001311, Colour(255, 255, 255));
    lowGainSlider.setColour(0x1001200, Colour(255, 255, 255));
    lowGainSlider.setColour(0x1001300, Colour(255, 255, 255));
    lowGainSlider.setColour(0x1001312, Colour(255, 255, 255));
    lowGainSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    lowGainLabel.attachToComponent (&lowGainSlider, false);
    lowGainLabel.setFont (Font (11.0f));
    lowGainLabel.setColour(0x1000281, Colour(255, 255, 255));
    lowGainLabel.setJustificationType(juce::Justification::centredBottom);
    
    //Decay
    decaySlider.setSliderStyle (Slider::RotaryHorizontalDrag);
    decaySlider.setRange(0.01, 0.9, 0.01);
    addAndMakeVisible(decaySlider);
    decaySlider.addListener(this);
    decaySlider.setColour(0x1001311, Colour(255, 255, 255));
    decaySlider.setColour(0x1001200, Colour(255, 255, 255));
    decaySlider.setColour(0x1001300, Colour(255, 255, 255));
    decaySlider.setColour(0x1001312, Colour(255, 255, 255));
    decaySlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    decayLabel.attachToComponent (&decaySlider, false);
    decayLabel.setFont (Font (11.0f));
    decayLabel.setColour(0x1000281, Colour(255, 255, 255));
    decayLabel.setJustificationType(juce::Justification::centredBottom);
    
    //Time
    timeSlider.setSliderStyle (Slider::RotaryHorizontalDrag);
    timeSlider.setRange(1, 4000, 1);
    addAndMakeVisible(timeSlider);
    timeSlider.addListener(this);
    timeSlider.setColour(0x1001311, Colour(255, 255, 255));
    timeSlider.setColour(0x1001200, Colour(255, 255, 255));
    timeSlider.setColour(0x1001300, Colour(255, 255, 255));
    timeSlider.setColour(0x1001312, Colour(255, 255, 255));
    timeSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    timeLabel.attachToComponent (&timeSlider, false);
    timeLabel.setFont (Font (11.0f));
    timeLabel.setColour(0x1000281, Colour(255, 255, 255));
    timeLabel.setJustificationType(juce::Justification::centredBottom);
    
    // Wet
    wetSlider.setSliderStyle (Slider::LinearVertical);
    wetSlider.setRange(-96.0, 10.0, 0.1);
    addAndMakeVisible(wetSlider);
    wetSlider.addListener(this);
    wetSlider.setColour(0x1001310, Colour(255, 255, 255));
    wetSlider.setColour(0x1001300, Colour(255, 255, 255));
    wetSlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    wetLabel.attachToComponent (&wetSlider, false);
    wetLabel.setFont (Font (11.0f));
    wetLabel.setColour(0x1000281, Colour(255, 255, 255));
    wetLabel.setJustificationType(juce::Justification::centredTop);
    
    //Dry
    drySlider.setSliderStyle (Slider::LinearVertical);
    drySlider.setRange(-96.0, 10.0, 0.1);
    addAndMakeVisible(drySlider);
    drySlider.addListener(this);
    drySlider.setColour(0x1001310, Colour(255, 255, 255));
    drySlider.setColour(0x1001300, Colour(255, 255, 255));
    drySlider.setTextBoxStyle(juce::Slider::TextBoxBelow, false, 100, 20);
    
    dryLabel.attachToComponent (&drySlider, false);
    dryLabel.setFont (Font (11.0f));
    dryLabel.setColour(0x1000281, Colour(255, 255, 255));
    dryLabel.setJustificationType(juce::Justification::centredTop);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (750, 460);
    
    // STEP 5.4 - start the timer
    startTimer (50);      // timerCallback() will get called every 50 msec.

}

Musi45effectAudioProcessorEditor::~Musi45effectAudioProcessorEditor()
{
}

//==============================================================================
void Musi45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour(2, 7, 49));
    
    // STEP 1.6 - add some text to the UI
    g.setColour (Colours::white);
    g.setFont (30.0f);
    g.drawFittedText ("FILET-O-DELAY", getLocalBounds(), Justification::centredTop, 1);
    
   // rawText (const String &text, int x, int y, int width, int height, Justification justificationType, bool useEllipsesIfTooBig=true) const
    g.drawText ("Peak Filter", 0, 45, 140, 40, Justification::centredTop, true);
    g.drawText ("Shelf Filter", 145, 45, 150, 40, Justification::centredTop, true);
    g.drawText ("Delay", 300, 45, 160, 40, Justification::centredTop, true);
    g.drawText ("Mix", 460, 45, 290, 40, Justification::centredTop, true);

    
    
    
    g.drawLine(145, 40, 145, 460, 2);
    g.drawLine(300, 40, 300, 460, 2);
    g.drawLine(460, 40, 460, 460, 2);
    g.drawLine(0, 80, 750, 80, 2);
    g.drawLine(0, 40, 750, 40, 2);
}

void Musi45effectAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    // STEP 1.5 - set the position and size of the slider objects
    peakFreqSlider.setBounds(20, 110, 100, 100);
    peakGainSlider.setBounds(20, 230, 100, 100);
    qSlider.setBounds(20, 350, 100, 100);
    
    
    lowFreqSlider.setBounds(170, 170, 100, 100);
    lowGainSlider.setBounds(170, 295, 100, 100);
    decaySlider.setBounds(315, 130, 125, 125);
    timeSlider.setBounds(315, 290, 125, 125);
    wetSlider.setBounds(500, 130, 100, 300);
    drySlider.setBounds(620, 130, 100, 300);
    
}

//==============================================================================
// STEP 3.3 - Implement the listener callback function
// This is our Slider::Listener callback, when the user drags a slider.
void Musi45effectAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    float vstVal;
    
    if (slider == &peakFreqSlider)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        
        // first set the usrParam from the slider, and get the vst normalized version of the uParam:
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::peakFreqParam].setWithUparam(peakFreqSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::peakFreqParam, vstVal);
    }
    
    else if (slider == &peakGainSlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::peakGainParam].setWithUparam(peakGainSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::peakGainParam, vstVal);
    }
    
    else if (slider == &qSlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::qParam].setWithUparam(qSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::qParam, vstVal);
    }
    else if (slider == &lowFreqSlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::lowCutoffParam].setWithUparam(lowFreqSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::lowCutoffParam, vstVal);
    }
    else if (slider == &lowGainSlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::shelfGainParam].setWithUparam(lowGainSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::shelfGainParam, vstVal);
    }
    else if (slider == &decaySlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::decayParam].setWithUparam(decaySlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::decayParam, vstVal);
    }
    else if (slider == &timeSlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::timeParam].setWithUparam(timeSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::timeParam, vstVal);
    }
    else if (slider == &wetSlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::wetParam].setWithUparam(wetSlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::wetParam, vstVal);
    }
    else if (slider == &drySlider)
    {
        vstVal = getProcessor().usrParams[Musi45effectAudioProcessor::dryParam ].setWithUparam(drySlider.getValue());
        
        // then call setParameter with the vst normalized value
        getProcessor().setParameterNotifyingHost (Musi45effectAudioProcessor::dryParam, vstVal);
    }
    
}

//==============================================================================
// STEP 5.3 - Set the timer callback to update the UI
// This timer periodically checks whether any of the filter's parameters have changed...
void Musi45effectAudioProcessorEditor::timerCallback()
{
    // get a pointer to our Processor object
    Musi45effectAudioProcessor& ourProcessor = getProcessor();
    
    // these get will update the sliders in the UI
    peakFreqSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::peakFreqParam].getUparamVal(), dontSendNotification);
    peakGainSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::peakGainParam].getUparamVal(), dontSendNotification);
    qSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::qParam].getUparamVal(), dontSendNotification);
    lowFreqSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::lowCutoffParam].getUparamVal(), dontSendNotification);
    lowGainSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::shelfGainParam].getUparamVal(), dontSendNotification);
    decaySlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::decayParam].getUparamVal(), dontSendNotification);
    timeSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::timeParam].getUparamVal(), dontSendNotification);
    wetSlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::wetParam].getUparamVal(), dontSendNotification);
    drySlider.setValue(ourProcessor.usrParams[Musi45effectAudioProcessor::dryParam].getUparamVal(), dontSendNotification);
}


