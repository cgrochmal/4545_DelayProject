/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


// STEP 4.4a - define default values for all user params
//const float defaultVolume = -96.0f;
const float defaultVolume = -3.f;
const float defaultPan = 0.0;
const double PI = 3.1415926535897932384626433832795;
const int defaultPeakFreq = 750; //Hz
const int defaultCutoff = 50; //hz
const float defaultQ = 3.f;
const int defaultTime = 40; //ms
const float defaultDecay = 0.7f;


//==============================================================================
Musi45effectAudioProcessor::Musi45effectAudioProcessor()
{
    // In the constructor do any initializations that need to be done once
    
    // STEP 4.4b - set default values for all user params
    usrParams[peakFreqParam].setMinMax(300, 20000);
    usrParams[peakFreqParam].setWithUparam(defaultPeakFreq);
    
    usrParams[peakGainParam].setMinMax(-96.0, 0.0);
    usrParams[peakGainParam].setWithUparam(defaultVolume);
    
    usrParams[qParam].setMinMax(0.5, 20.0);
    usrParams[qParam].setWithUparam(defaultQ);
    
    usrParams[lowCutoffParam].setMinMax(0, 200);
    usrParams[lowCutoffParam].setWithUparam(defaultCutoff);
    
    usrParams[shelfGainParam].setMinMax(-96.0, 0.0);
    usrParams[shelfGainParam].setWithUparam(defaultVolume);
    
    usrParams[decayParam].setMinMax(0.01, 0.9);
    usrParams[decayParam].setWithUparam(defaultDecay);

    usrParams[timeParam].setMinMax(1, 4000);
    usrParams[timeParam].setWithUparam(defaultTime);
    
    usrParams[wetParam].setMinMax(-96.0, 10.0);
    usrParams[wetParam].setWithUparam(defaultVolume);

    usrParams[dryParam].setMinMax(-96.0, 10.0);
    usrParams[dryParam].setWithUparam(defaultVolume);
    
    aParamDryGain = 0.7; //-3dB as linear gain
    aParamWetGain = 0.7;


}

Musi45effectAudioProcessor::~Musi45effectAudioProcessor()
{
}

//==============================================================================
const String Musi45effectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

// STEP 4.3 - return the correct number of user parameters
int Musi45effectAudioProcessor::getNumParameters()
{
    return totalNumParams;;
}

float Musi45effectAudioProcessor::getParameter (int index)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!

    // STEP 4.5 - return the slider value of a user param when called with its index
    switch (index)
    {

        case peakFreqParam:
            return usrParams[peakFreqParam].getVstVal();
        case peakGainParam:
            return usrParams[peakGainParam].getVstVal();
        case qParam:
            return usrParams[qParam].getVstVal();
        case lowCutoffParam:
            return usrParams[lowCutoffParam].getVstVal();
        case shelfGainParam:
            return usrParams[shelfGainParam].getVstVal();
        case decayParam:
            return usrParams[decayParam].getVstVal();
        case timeParam:
            return usrParams[timeParam].getVstVal();
        case wetParam:
            return usrParams[wetParam].getVstVal();
        case dryParam:
            return usrParams[dryParam].getVstVal();

        default:
            return 0.0f;
    }
    
    return usrParams[index].getVstVal();
    
}

void Musi45effectAudioProcessor::setParameter (int index, float newValue)
{
    
    usrParams[index].setWithVstVal(newValue);
    calcAlgParams();
}

int Musi45effectAudioProcessor::calcDelaySampsFromMsec(float time){
    return (fs/1000.f)*time;
}

void Musi45effectAudioProcessor::calcDelays()
{
    float msec = usrParams[timeParam].getUparamVal();
    int samps = calcDelaySampsFromMsec(msec);
    delay1L.setDelay(samps);
    delay1R.setDelay(samps);
}

// I added this function to calculate new gain values whenever Volume or Pan changes
void Musi45effectAudioProcessor::calcAlgParams()
{

    
    aParamDryGain = linearGainFromDb(usrParams[dryParam].getUparamVal());
    aParamWetGain = linearGainFromDb(usrParams[wetParam].getUparamVal());
    aParamDecay = usrParams[decayParam].getUparamVal();
    calcFilterCoeffs();
    calcDelays();
   
    
}

float Musi45effectAudioProcessor::linearGainFromDb(float gainDb){
    
    return powf(10, gainDb / 20.0);
}

// STEP 4.7b
float Musi45effectAudioProcessor::getParameterDefaultValue (int index)
{
    switch (index)
    {
        case peakFreqParam:
            return defaultPeakFreq;
        case peakGainParam:
            return defaultVolume;
        case qParam:
            return defaultQ;
        case lowCutoffParam:
            return defaultCutoff;
        case shelfGainParam:
            return defaultVolume;
        case decayParam:
            return defaultDecay;
        case timeParam:
            return defaultTime;
        case wetParam:
            return defaultVolume;
        case dryParam:
            return defaultVolume;

        default:            break;
    }
    
    return 0.0f;
}

void Musi45effectAudioProcessor::calcFilterCoeffs()
{
    // low shelf
    float shelfGainDb = usrParams[shelfGainParam].getUparamVal();
    float fc = usrParams[lowCutoffParam].getUparamVal();
    float shelfCoeffs[5]; // an array of 5 floats for filter coeffs
  
  
   
    // peak
    float peakGainDb = usrParams[peakGainParam].getUparamVal();
    float Q = usrParams[qParam].getUparamVal();
    float peakFreq = usrParams[peakFreqParam].getUparamVal();
    float peakCoeffs[5];
    
    
    Mu45FilterCalc::calcCoeffsLowShelf(shelfCoeffs, fc, shelfGainDb, fs);
    Mu45FilterCalc::calcCoeffsPeak(peakCoeffs, peakFreq, peakGainDb, Q, fs);
    
    // high shelf
    // Mu45FilterCalc::calcCoeffsHighShelf(coeffs, fc, gainDb, fs);
    
    // LPF
    // Mu45FilterCalc::calcCoeffsLPF(coeffs, fc, Q, fs);
    
    // HPF
    //Mu45FilterCalc::calcCoeffsHPF(coeffs, fc, Q, fs);
    
    // BPF
    // Mu45FilterCalc::calcCoeffsBPF(coeffs, fc, Q, fs);
    
    // set filter (the filters are stk::BiQuads)
    lowFilterL.setCoefficients(shelfCoeffs[0], shelfCoeffs[1], shelfCoeffs[2], shelfCoeffs[3], shelfCoeffs[4]);
    lowFilterR.setCoefficients(shelfCoeffs[0], shelfCoeffs[1], shelfCoeffs[2], shelfCoeffs[3], shelfCoeffs[4]);
    
    peakFilterL.setCoefficients(peakCoeffs[0], peakCoeffs[1], peakCoeffs[2], peakCoeffs[3], peakCoeffs[4]);
    peakFilterR.setCoefficients(peakCoeffs[0], peakCoeffs[1], peakCoeffs[2], peakCoeffs[3], peakCoeffs[4]);
}

// STEP 4.8
const String Musi45effectAudioProcessor::getParameterName (int index)
{
    
    switch (index)
    {
        case peakFreqParam:   return "peak frequency";
        case peakGainParam:      return "peak gain";
        case qParam:            return "Q";
        case lowCutoffParam:    return "shelf cutoff frequency";
        case shelfGainParam:    return "shelf gain";
        case decayParam:        return "decay";
        case timeParam:         return "delay time";
        case wetParam:          return "wet gain";
        case dryParam:          return "dry gain";
        default:            break;
    }
    
    return String::empty;
}

// STEP 4.9 - not sure who calls this or when!
const String Musi45effectAudioProcessor::getParameterText (int index)
{
    return String( usrParams[index].getUparamVal() );
   // return String (getParameter (index), 2);
}

const String Musi45effectAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String Musi45effectAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool Musi45effectAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool Musi45effectAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool Musi45effectAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Musi45effectAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Musi45effectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Musi45effectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Musi45effectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Musi45effectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Musi45effectAudioProcessor::setCurrentProgram (int index)
{
}

const String Musi45effectAudioProcessor::getProgramName (int index)
{
    return String();
}

void Musi45effectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void Musi45effectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    
    fs = sampleRate;
    
    int maxSamps = calcDelaySampsFromMsec(4000);
    delay1L.setMaximumDelay(maxSamps);
    delay1R.setMaximumDelay(maxSamps);
    
    // calc all alg params
    calcAlgParams();
}

void Musi45effectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void Musi45effectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    const int numSamples = buffer.getNumSamples();
    
    // this version assumes we always have 2 channels
    float* channelDataL = buffer.getWritePointer (0);
    float* channelDataR = buffer.getWritePointer (1);
    
    float tempL, tempR;
    float wetL, wetR;
    float filteredL, filteredR;
    
    for (int i = 0; i < numSamples; ++i)
    {
        
        tempL = delay1L.lastOut();
        tempR = delay1R.lastOut();
        
        filteredL = peakFilterL.tick(lowFilterL.tick(tempL));
        filteredR = peakFilterR.tick(lowFilterR.tick(tempR));
        
        wetL =  filteredL * aParamDecay;
        wetR =  filteredR * aParamDecay;
        
        tempL = wetL + channelDataL[i];
        tempR = wetR + channelDataR[i];

        delay1L.tick(tempL);
        delay1R.tick(tempR);
        
        channelDataL[i] =  wetL*aParamWetGain + aParamDryGain*channelDataL[i];
        channelDataR[i] =  wetR*aParamWetGain + aParamDryGain*channelDataR[i];
        
   
    }
}

//==============================================================================
bool Musi45effectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Musi45effectAudioProcessor::createEditor()
{
    return new Musi45effectAudioProcessorEditor (*this);
}

//==============================================================================
void Musi45effectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Musi45effectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Musi45effectAudioProcessor();
}
