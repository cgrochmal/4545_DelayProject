/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "UParam.h"
#include "BiQuad.h"
#include "Delay.h"
#include "Mu45FilterCalc.h"


//==============================================================================
/**
*/
class Musi45effectAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    Musi45effectAudioProcessor();
    ~Musi45effectAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;
    float getParameterDefaultValue (int index) override;    // STEP 4.7a

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    
    //===== ADD NEW STUFF HERE =====================================================
    
    
    // STEP 4.1 - Create an enumerated type called 'Parameters' for the User Parameters
    enum Parameters
    {
        peakFreqParam = 0,
        peakGainParam,
        qParam,
        lowCutoffParam,
        shelfGainParam,
        decayParam,
        timeParam,
        wetParam,
        dryParam,
        totalNumParams      // must end with this variable
    };
    
    // STEP 4.2 - Create a float to store the value of each user parameter
    //float uParamVolume;
    //float uParamPan;
    UParam* getUserParams();
    
    UParam usrParams[totalNumParams];

private:
    //==============================================================================
    
    // STEP 6.1 - Add algorithm parameters here
   // float aParamGainL, aParamGainR;
    float fs;
    
    stk::BiQuad lowFilterL, lowFilterR;
    stk::BiQuad peakFilterL, peakFilterR;
    
    stk::Delay delay1L, delay1R;
    
    float aParamDryGain, aParamWetGain;
    float aParamDecay; 

    
    // STEP XX - Add any variables or objects used in the DSP
    
    // STEP XX - Add any methods used in algorithm parameter calculation or DSP
    void calcAlgParams();
    float linearGainFromDb(float gainDb);
    
    void calcFilterCoeffs();
    void calcGains();
    void calcDelays();
    int calcDelaySampsFromMsec(float time);
    
    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Musi45effectAudioProcessor)
    
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
